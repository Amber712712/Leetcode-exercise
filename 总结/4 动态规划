1 爬楼梯
def func(n):
    if n<=2:
       return n
    
    dp=[0]*n
    dp[0]=1
    dp[1]=2
    for i in range(2,n):
        dp[i]=dp[i-1]+dp[i-2]
    return dp[-1]

2 偷盗问题
def func(nums):
    if not nums:
       return 0
    if len(nums)==1:
       return nums[0]
       
    dp=[0]*len(nums)
    dp[0]=nums[0]
    dp[1]=max(nums[0],nums[1])
    
    for i in range(2,len(nums)):
        dp[i]=max(dp[i-1],dp[i-2]+nums[i])
        
    return dp[-1]
环形偷盗：
def func(nums):
    if not nums:
       return 0
    if len(nums)==1:
       return nums[0]
    return max(func1(nums[0:-1],func1(nums[1:]))
def func1(nums):
    if not nums:
       return 0
    if len(nums)==1:
       return nums[0]
       
    dp=[0]*len(nums)
    dp[0]=nums[0]
    dp[1]=max(nums[0],nums[1])
    
    for i in range(2,len(nums)):
        dp[i]=max(dp[i-1],dp[i-2]+nums[i])
        
    return dp[-1]
3 矩阵问题： 最小cost  多少路径问题
4 前缀和
