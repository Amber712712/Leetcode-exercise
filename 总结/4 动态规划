1 爬楼梯
def func(n):
    if n<=2:
       return n
    
    dp=[0]*n
    dp[0]=1
    dp[1]=2
    for i in range(2,n):
        dp[i]=dp[i-1]+dp[i-2]
    return dp[-1]

2 偷盗问题
def func(nums):
    if not nums:
       return 0
    if len(nums)==1:
       return nums[0]
       
    dp=[0]*len(nums)
    dp[0]=nums[0]
    dp[1]=max(nums[0],nums[1])
    
    for i in range(2,len(nums)):
        dp[i]=max(dp[i-1],dp[i-2]+nums[i])
        
    return dp[-1]
环形偷盗：
def func(nums):
    if not nums:
       return 0
    if len(nums)==1:
       return nums[0]
    return max(func1(nums[0:-1],func1(nums[1:]))
def func1(nums):
    if not nums:
       return 0
    if len(nums)==1:
       return nums[0]
       
    dp=[0]*len(nums)
    dp[0]=nums[0]
    dp[1]=max(nums[0],nums[1])
    
    for i in range(2,len(nums)):
        dp[i]=max(dp[i-1],dp[i-2]+nums[i])
        
        
    return dp[-1]
3 矩阵问题： 最小cost  多少路径问题
def func(nums):
if not nums:
   return 0
r,c=len(nums),len(nums[0])
grid=[[0]*c for i in range(r)]
grid[0][0]=0
for i in range(1,r):
    grid[i][0]=nums[i][0]+grid[i-1][0]
for j in range(1,c):
    grid[][]=
for i in range(2,r):
    for j in range(2,c):
        grid[i][j]=min(grid[i-1][j],grid[i][j-1])+nums[i][j]
        
 return grid[r-1][c-1]
4 前缀和
def func(nums):
    def _init_(self,nums):
        n=len(nums)
        self.presum=[0]*(n+1)
        for i in range(1,n+1):
            self.presum[i]=presum[i-1]+nums[i-1]
        
    def presum(self,i,j):
        return self.presum(j+1)-self.presum(i)
5 数组中等差递增子区间的个数   (【1，2，3】     【2，3，4】【1，2，3，4】)
def func(nums):
if len(nums)<3:
   return 0
dp=[0]*len(nums)
res=0
for i in range(2,len(nums)):
    if nums[i]-nums[i-1]=nums[i-1]-nums[i-2]:
       dp[i]=dp[i-1]+1   ###每次往后是一个序列，加1 
       res+=dp[i] 
return res

6 拆分整数
def func(num):
    if not num or num ==0 or num==1:
       return 0
    dp=[0]*(num+1)
    for i in range(2,len(dp)):
        for j in range(1,i):
            dp[i]=max(j*(i-j),j*dp[i-j],dp[i]) ### 这里用i历遍，然后有两种方法比较
        
    return dp[-1]
7 拆分整数为最少平方数的和（12=4+4+4）
def func(num):
    if not num or num==0:
       return 0
    dp=[0]+[inf]*num   
    for i in range(1,num+1):
        for j in range(1,int(sqrt(i)+1)):
            dp[i]=min(dp[i],dp[i-j**2]+1)  ####这里将大问题化为小问题，利用已知的到dp值, +1是进行一次分裂
    return dp[-1]

法二：
def func(num):
    if not num or num==0:
       return 0
    dp=[i for i in range(num+1)]
    for i in range(2,num+1):
        for j in range(1,int(sqrt(num))+1):
            dp[i]=min(dp[i],dp[i-j**2]+1)
    return dp[-1]
    
    
8 解码问题  233：[23,3][2,3,3] ans=2 有多少解码方法  
####注意为了方便，需要在s前加“ ” 增长1长度
使得两个长度一样
def func(s):
    if not s or s[0]=='0':
       return 0
    s=" "+s
    dp=[0]*len(s)
    dp[0]=dp[1]=1
    for i in range(2,len(s)):    分两种情况讨论：若加的为0 和不为0
   
        if s[i]=='0':
           if s[i-1]=='1' or s[i-1]=='2': 只能和前面的绑定
              dp[i]=dp[i-2]
           else:
              return 0             不能拆分
        else:
            if s[i-1]=='1' or (s[i-1]=='2' and "1"<=s[i]<="6"):
              dp[i]=dp[i-1]+dp[i-2]      
            else:
              dp[i]=dp[i-1]        只能拆分开
           
       return dp[-1]
9 若0到25代表a 到 z ，不需要考虑0，只需考虑i 与i-1 能否绑定， 若可以，dp[i]=dp[i-1]+dp[i-2], 诺不能（只能拆分），dp[i]=dp[i-1]
10 最长递增子序列
def func(nums):
    if not nums:
       return 0
    dp=[]
    for i in range(len(nums)):
        dp.append(1)
        for j in range(i):
            if nums[i]>nums[j]:
               dp[i]=max(dp[i],dp[j]+1)
11 最长递增子序列=最多对数问题=最多无重叠区间=气球问题（动态规划或贪心）
def func(nums):         dp存储的是i位置无重复区间的个数
    if not nums;
       return 0
    dp=[1]*len(nums)
    
    for i in range(1,len(nums)):
        for j in range(i):
            if nums[i][0]>nums[j][1]:
               dp[i]=max(dp[i],dp[j]+1)
    return max(dp)或者len(nums)-max(dp)
12 最长摆动子序列  https://leetcode-cn.com/problems/maximum-length-of-pair-chain/solution/chuan-shang-yi-fu-wo-jiu-bu-ren-shi-ni-liao-lai--2/
def func(nums):
    if len(nums)<2:
       return len(nums)
    up,down=1,1
    for i in range(1,len(nums)):
        if nums[i]>nums[i-1]:
           up=down+1
        elif nums[i]<nums[i-1]:
           down=up+1
     return max(up,down)
如果用up=dp[] 和down=dp[] 需要用三种情况讨论
def func(nums):
    if len(nums)<2:
       return len(nums)
13 最长公共子序列 （二元动态规划）
def func(m,n):
    a=len(m)
    b=len(n)
    dp=[[0]*(b+1) for i in range(a+1)]
    for i in range(1,a+1):
        for j in range(1,b+1):
            if m[i-1]==n[j-1]:
               dp[i][j]=dp[i-1][j-1]+1
            else:
               dp[i][j]=max(dp[i-1][j]+dp[i][j-1])
    return dp[a][b]

14 背包问题 判断一组数列中能否有定值
def func(nums):
if not nums:
   return False
s=sum(nums)
m=max(nums)
n=len(nums)
if n<2:
   return False
if s%2!=0:
   return False
if m>s/2:
   return False
t=s//2
dp=[[False]*(t+1) for i in range(n)]
for i in range(n):
    dp[i][0]=True
dp[0][nums[0]]=True
for i in range(1,n):
    for j in range(1,t+1):
        if j>=nums[i]:
           dp[i][j]=dp[i-1][j]|dp[i-1][j-nums[i]]
        else:
           dp[i][j]=dp[i-1][j]
return dp[-1][-1]
背包问题 改变一组数的正负号使得它们的和为一给定数 有多少方法
正-负=值
正+负+正-负=值+sum
2*正=值+sum
正=（值+sum）//2
def func(nums,t):
    s=sum(nums)
    n=len(nums)
    if t>s:
       return 0
    if (t+s)%2!=0:
       return 0
    if (t+s)//2<0:
       return 0
    newt=(t+s)%2
    dp=[[0]*(newt+1) for i in range(n+1)]
    dp[0][0]=1
    for i in range(1,n+1):
        for j in range(new+1):
            if j>nums[i-1]:
               dp[i][j]=dp[i-1][j]+dp[i-1][j-nums[i-1]]
            else:
               dp[i][j]=dp[i-1][j]
    return dp[-1][-1]
    
    
            

               

            
