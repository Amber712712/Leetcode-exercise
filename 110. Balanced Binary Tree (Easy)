two ways to calculate
1 from top to the bottom O(n^2) : match: return height  not match: return -1
2 from bottom to the top O(n)

M2:
def func(root):
    def height(root):
        if not root:
           return False
        height(root.left)
        height(root.right)
        if height(root.left)==-1 or height(root.right)==-1 or abs(height(root.left)-height(root.right))>1:
           return -1
        else:
           return max(height(root.left),height(root.right))+1
        return height(root)

M1:
def func(root):
    def height(root):
        if not root:
           return 0
        else:
           return max(height(root.left),height(root.right))+1
     if not root:
        return true
     elif abs(height(root.left)-height(root.right))>1:
        return False
     else:
        return height(root.left) and height(root.right)
    
